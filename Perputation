public class Perputation{
  private void permute(int[] nums,List<List<Integer>> combinations,Integer[] comb,int filled,boolean[] used){
        if(filled==nums.length){
            combinations.add(new ArrayList<>(Arrays.asList(comb)));
        }else{
            for(int i=0;i<nums.length;i++){//we can understand the remained numbers will have the equivalent chance to be at the first place
                if(used[i])
                    continue;
                if(i>0&&nums[i]==nums[i-1]&&!used[i-1])
                    continue;
                
                used[i]=true;//choose nums[i]
                comb[filled]=nums[i];
                permute(nums,combinations,comb,filled+1,used);
                
                used[i]=false;// do not choose nums[i];
            }
        }
    }

    public List<List<Integer>> permuteUnique(int[] nums) {
        List<List<Integer>> lists=new ArrayList<>();
        Integer[] comb=new Integer[nums.length];
        boolean[] used=new boolean[nums.length];
        for(int i=0;i<used.length;i++){
            used[i]=false;
        }
        Arrays.sort(nums);
        permute(nums,lists,comb,0,used);
        return lists;
    }
}
